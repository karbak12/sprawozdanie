axis.ticks = element_blank(),  # Usunięcie ticków osi
axis.title = element_blank())  # Usunięcie tytułów osi
# Ładowanie niezbędnych bibliotek
library(rnaturalearth)
library(sf)
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
# Krok 1: Wczytanie danych geograficznych krajów z rnaturalearth
world <- ne_countries(scale = 50, returnclass = 'sf')
# Krok 3: Lista krajów do wyświetlenia (bez Rosji)
countries_to_show <- c("Albania", "Austria", "Belarus", "Belgium", "Bulgaria",
"Croatia", "Czechia", "Denmark", "Estonia",
"Finland", "France", "Germany", "Greece", "Hungary", "Iceland",
"Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta",
"Moldova", "Montenegro", "Netherlands", "North Macedonia",
"Norway", "Poland", "Portugal", "Romania", "Serbia", "Russia",
"Serbia and Montenegro", "Slovakia", "Slovenia", "Soviet Union",
"Spain", "Sweden", "Switzerland", "Ukraine", "United Kingdom")
# Krok 4: Filtruj dane, aby tylko wybrane kraje były w zbiorze i dla roku 2000
data_filtered <- data %>%
filter(Kraj %in% countries_to_show) %>%
filter(Rok == 2000)  # Filtruj dane na rok 2000
# Krok 5: Połącz dane geograficzne z danymi o krajach
world_filtered <- world %>%
filter(name %in% countries_to_show) %>%
left_join(data_filtered, by = c("name" = "Kraj"))
# Krok 6: Rysowanie mapy (bez etykiet i bez Rosji)
ggplot(world_filtered) +
geom_sf(aes(fill = PKB), color = 'black') +  # Kolorowanie krajów na podstawie PKB
coord_sf(crs = st_crs(3035),                   # Ustawienie układu współrzędnych
xlim = c(2000000, 6200000),
ylim = c(1500000, 5500000)) +         # Zakres widocznej części mapy
scale_fill_viridis_c(option = "C", na.value = 'white') +  # Skala kolorów
theme_minimal() +  # Minimalistyczny wygląd
labs(title = "Mapa PKB na świecie (Wybrane kraje, rok 2000)",
subtitle = "PKB per capita w 2000 roku") +
theme(axis.text = element_blank(),   # Usunięcie napisów osi
axis.ticks = element_blank(),  # Usunięcie ticków osi
axis.title = element_blank())  # Usunięcie tytułów osi
library(tidyverse)
# Filtrujemy dane dla regionów i lat
data_region_year <- data %>%
# Regresja liniowa z interakcją Region i Rok
model_region_year <- lm(PKB ~ Region * Rok, data = data_region_year)
install.packages("data_region_year")
library(tidyverse)
# Filtrujemy dane dla regionów i lat
data_region_year <- data %>%
# Regresja liniowa z interakcją Region i Rok
model_region_year <- lm(PKB ~ Region * Rok, data = data_region_year)
install.packages("data_region_year")
data_region_year <- data %>%
group_by(Region, Rok) %>%
summarise(mean_PKB = mean(PKB), .groups = "drop")  # Średni PKB dla każdego roku i regionu
# Tworzenie wykresu regresji
ggplot(data_region_year, aes(x = Rok, y = mean_PKB, color = Region)) +
geom_point(size = 2) +  # Punkty danych
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, size = 1) +  # Linie regresji
labs(
title = "Regresja liniowa PKB w Europie w zależności od regionu na przestrzeni lat",
x = "Rok",
y = "Średnia wartość PKB (per capita)"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Obliczenie średniego PKB dla każdego regionu
avg_pkb_region <- data %>%
filter(Rok == 2000,Region %in% c("Southern Europe", "Western Europe", "Eastern Europe", "Northern Europe")) %>%
group_by(Region) %>%
summarise(Średni_PKB = mean(PKB, na.rm = TRUE)) %>%
arrange(desc(Średni_PKB))  # Sortowanie w porządku malejącym
# Tworzenie wykresu słupkowego
ggplot(avg_pkb_region, aes(x = reorder(Region, Średni_PKB), y = Średni_PKB, fill = Region)) +
geom_bar(stat = "identity") +
labs(
title = "Średni PKB per capita w regionach Europy w 2000",
x = "Region",
y = "Średni PKB per capita",
fill = "Region"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Obliczenie średniego PKB dla każdego regionu
avg_pkb_region <- data %>%
filter(Rok == 2020,Region %in% c("Southern Europe", "Western Europe", "Eastern Europe", "Northern Europe")) %>%
group_by(Region) %>%
summarise(Średni_PKB = mean(PKB, na.rm = TRUE)) %>%
arrange(desc(Średni_PKB))  # Sortowanie w porządku malejącym
# Tworzenie wykresu słupkowego
ggplot(avg_pkb_region, aes(x = reorder(Region, Średni_PKB), y = Średni_PKB, fill = Region)) +
geom_bar(stat = "identity") +
labs(
title = "Średni PKB per capita w regionach Europy w 2020",
x = "Region",
y = "Średni PKB per capita",
fill = "Region"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| echo: false
#| warning: false
library(tidyverse)
data <- read_csv2("dane_WIID_2023.csv", show_col_types = FALSE) %>%
filter(region_un == "Europe") %>%
select(country, c3, year, gini, resource_detailed, scale_detailed, region_un_sub, eu, gdp) %>%
mutate(across(c(country, c3, resource_detailed, scale_detailed, region_un_sub, eu), as.factor)) %>%
mutate(across(c(year, gini), as.numeric)) %>%
filter(resource_detailed != "Consumption") %>%
filter(if_all(everything(), ~ !is.na(.))) %>%
filter(scale_detailed == "Per capita") %>%
mutate(
gdp = str_remove_all(gdp, " "), # Remove spaces from PKB (gdp)
gdp = as.numeric(gdp)          # Convert PKB (gdp) to numeric
) %>%
rename(
Kraj = country,
Skrót = c3,
Rok = year,
G = gini,
Zasoby = resource_detailed,
Skala = scale_detailed,
Region = region_un_sub,
UE = eu,
PKB = gdp
)
head(data)
unique(data$Region)
library(dplyr)
# Zliczanie liczby wystąpień dla każdego roku
najczestszy_rok <- data %>%
count(Rok) %>%                 # Zliczanie wystąpień dla każdej wartości w kolumnie Rok
arrange(desc(n)) %>%           # Sortowanie według liczby wystąpień (malejąco)
slice_head(n = 30)              # Wybranie wiersza z najczęstszym rokiem
print(najczestszy_rok)
# Filtracja danych dla Irlandii i Luksemburga w roku 2020
pkb_data <- data %>%
filter(Kraj %in% c( "Moldova") ) %>%  # Filtrujemy po krajach i roku
select(Kraj, Rok, PKB)  # Wybieramy tylko interesujące nas kolumny
# Wyświetlanie wyników
print(pkb_data)
# Filtracja danych dla roku 2000
data_2000 <- data %>%
distinct(Kraj, PKB, .keep_all = TRUE) %>%
filter(Rok == 2000) %>%
arrange(PKB) %>%            # Sortowanie według PKB (rosnąco)
slice_head(n = 15)          # Wybór 15 krajów o najniższym PKB
# Tworzenie wykresu
library(ggplot2)
ggplot(data_2000, aes(x = reorder(Kraj, PKB), y = PKB, fill = PKB)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(
title = "The 15 Countries with Lowest GDP in Europe in 2000",
x = "Country",
y = "GDP (Per Capita)"
) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue",labels = scales::label_number(accuracy = 1))
# Filtracja danych dla roku 2000
data_2000 <- data %>%
distinct(Kraj, PKB, .keep_all = TRUE) %>%  # Usunięcie duplikatów
filter(Rok == 2000) %>%
arrange(desc(PKB)) %>%           # Sortowanie według PKB (malejąco)
slice_head(n = 15)               # Wybór 15 krajów z najwyższym PKB
# Tworzenie wykresu
ggplot(data_2000, aes(x = reorder(Kraj, PKB), y = PKB, fill = PKB)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(
title = "The 15 Countries with Highest GDP in Europe in 2000",
x = "Country",
y = "GDP (Per Capita)"
) +
theme_minimal() +
scale_fill_gradient(
low = "lightblue",
high = "darkblue",
name = "GDP (in USD)",
labels = scales::label_number(accuracy = 1)   # Formatowanie wartości w legendzie
)
# Filtracja danych dla roku 2020
data_2020 <- data %>%
distinct(Kraj, PKB, .keep_all = TRUE) %>%
filter(Rok == 2020) %>%
arrange(PKB) %>%            # Sortowanie według PKB (rosnąco)
slice_head(n = 15)          # Wybór 15 krajów o najniższym PKB
# Tworzenie wykresu
library(ggplot2)
ggplot(data_2020, aes(x = reorder(Kraj, PKB), y = PKB, fill = PKB)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(
title = "The 15 Countries with Lowest GDP in Europe in 2020",
x = "Country",
y = "GDP (Per Capita)"
) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue",labels = scales::label_number(accuracy = 1))
# Filtracja danych dla roku 2000
data_2020 <- data %>%
distinct(Kraj, PKB, .keep_all = TRUE) %>%  # Usunięcie duplikatów
filter(Rok == 2020) %>%
arrange(desc(PKB)) %>%           # Sortowanie według PKB (malejąco)
slice_head(n = 15)               # Wybór 15 krajów z najwyższym PKB
# Tworzenie wykresu
ggplot(data_2020, aes(x = reorder(Kraj, PKB), y = PKB, fill = PKB)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(
title = "The 15 Countries with Highest GDP in Europe in 2000",
x = "Country",
y = "GDP (Per Capita)"
) +
theme_minimal() +
scale_fill_gradient(
low = "lightblue",
high = "darkblue",
name = "GDP (in USD)",
labels = scales::label_number(accuracy = 1)   # Formatowanie wartości w legendzie
)
# Biblioteki
library(tidyverse)
# Filtracja danych dla krajów
rich_countries <- c("Luxembourg", "Ireland", "Switzerland", "Norway", "Netherlands", "Denmark", "Austria")
poor_countries <- c("Moldova", "Ukraine", "Belarus", "Bulgaria","North Macedonia", "Russia","Latvia")
# Dane dla bogatych krajów
data_rich <- data %>%
filter(Kraj %in% rich_countries) %>%
group_by(Kraj, Rok) %>%
summarise(PKB_avg = mean(PKB, na.rm = TRUE), .groups = "drop")
# Dane dla biednych krajów
data_poor <- data %>%
filter(Kraj %in% poor_countries) %>%
group_by(Kraj, Rok) %>%
summarise(PKB_avg = mean(PKB, na.rm = TRUE), .groups = "drop")
# Wykres dla bogatych krajów
plot_rich <- ggplot(data_rich, aes(x = Rok, y = PKB_avg, color = Kraj)) +
geom_line(size = 1) +
labs(
title = "Average Income from 1960-2014 in 'Rich' Countries",
x = "Year",
y = "GDP per capita"
) +
theme_minimal()
# Wykres dla biednych krajów
plot_poor <- ggplot(data_poor, aes(x = Rok, y = PKB_avg, color = Kraj)) +
geom_line(size = 1) +
labs(
title = "PKB from 1960-2014 in 'Poor' Countries",
x = "Year",
y = "GDP per capita"
) +
theme_minimal()
# Wyświetlenie wykresów obok siebie
library(patchwork)
plot_rich
plot_poor
data_region_year <- data %>%
group_by(Region, Rok) %>%
summarise(mean_PKB = mean(PKB), .groups = "drop")  # Średni PKB dla każdego roku i regionu
# Tworzenie wykresu regresji
ggplot(data_region_year, aes(x = Rok, y = mean_PKB, color = Region)) +
geom_point(size = 2) +  # Punkty danych
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, size = 1) +  # Linie regresji
labs(
title = "Regresja liniowa PKB w Europie w zależności od regionu na przestrzeni lat",
x = "Rok",
y = "Średnia wartość PKB (per capita)"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Obliczenie średniego PKB dla każdego regionu
avg_pkb_region <- data %>%
filter(Rok == 2000,Region %in% c("Southern Europe", "Western Europe", "Eastern Europe", "Northern Europe")) %>%
group_by(Region) %>%
summarise(Średni_PKB = mean(PKB, na.rm = TRUE)) %>%
arrange(desc(Średni_PKB))  # Sortowanie w porządku malejącym
# Tworzenie wykresu słupkowego
ggplot(avg_pkb_region, aes(x = reorder(Region, Średni_PKB), y = Średni_PKB, fill = Region)) +
geom_bar(stat = "identity") +
labs(
title = "Średni PKB per capita w regionach Europy w 2000",
x = "Region",
y = "Średni PKB per capita",
fill = "Region"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Obliczenie średniego PKB dla każdego regionu
avg_pkb_region <- data %>%
filter(Rok == 2020,Region %in% c("Southern Europe", "Western Europe", "Eastern Europe", "Northern Europe")) %>%
group_by(Region) %>%
summarise(Średni_PKB = mean(PKB, na.rm = TRUE)) %>%
arrange(desc(Średni_PKB))  # Sortowanie w porządku malejącym
# Tworzenie wykresu słupkowego
ggplot(avg_pkb_region, aes(x = reorder(Region, Średni_PKB), y = Średni_PKB, fill = Region)) +
geom_bar(stat = "identity") +
labs(
title = "Średni PKB per capita w regionach Europy w 2020",
x = "Region",
y = "Średni PKB per capita",
fill = "Region"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_2020 <- data %>%
filter(Rok == 2020)
# Wykres boxplot porównujący PKB w różnych regionach w 2020 roku
ggplot(data_2020, aes(x = Region, y = PKB, fill = Region)) +
geom_boxplot() +
labs(
title = "Rozkład PKB w różnych regionach Europy w 2020 roku",
x = "Region",
y = "PKB"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_2020 <- data %>%
filter(Rok == 2000)
# Wykres boxplot porównujący PKB w różnych regionach w 2020 roku
ggplot(data_2020, aes(x = Region, y = PKB, fill = Region)) +
geom_boxplot() +
labs(
title = "Rozkład PKB w różnych regionach Europy w 2000 roku",
x = "Region",
y = "PKB"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Ładowanie niezbędnych bibliotek
library(rnaturalearth)
library(sf)
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
# Krok 1: Wczytanie danych geograficznych krajów z rnaturalearth
world <- ne_countries(scale = 50, returnclass = 'sf')
# Krok 3: Lista krajów do wyświetlenia (bez Rosji)
countries_to_show <- c("Albania", "Austria", "Belarus", "Belgium", "Bulgaria",
"Croatia", "Czechia", "Denmark", "Estonia",
"Finland", "France", "Germany", "Greece", "Hungary", "Iceland",
"Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta",
"Moldova", "Montenegro", "Netherlands", "North Macedonia",
"Norway", "Poland", "Portugal", "Romania", "Serbia", "Russia",
"Serbia and Montenegro", "Slovakia", "Slovenia", "Soviet Union",
"Spain", "Sweden", "Switzerland", "Ukraine", "United Kingdom")
# Krok 4: Filtruj dane, aby tylko wybrane kraje były w zbiorze i dla roku 2000
data_filtered <- data %>%
filter(Kraj %in% countries_to_show) %>%
filter(Rok == 2020)  # Filtruj dane na rok 2000
# Krok 5: Połącz dane geograficzne z danymi o krajach
world_filtered <- world %>%
filter(name %in% countries_to_show) %>%
left_join(data_filtered, by = c("name" = "Kraj"))
# Krok 6: Rysowanie mapy (bez etykiet i bez Rosji)
ggplot(world_filtered) +
geom_sf(aes(fill = PKB), color = 'black') +  # Kolorowanie krajów na podstawie PKB
coord_sf(crs = st_crs(3035),                   # Ustawienie układu współrzędnych
xlim = c(2000000, 6200000),
ylim = c(1500000, 5500000)) +         # Zakres widocznej części mapy
scale_fill_viridis_c(option = "C", na.value = 'white') +  # Skala kolorów
theme_minimal() +  # Minimalistyczny wygląd
labs(title = "Mapa PKB na świecie (Wybrane kraje, rok 2020)",
subtitle = "PKB per capita w 2020 roku") +
theme(axis.text = element_blank(),   # Usunięcie napisów osi
axis.ticks = element_blank(),  # Usunięcie ticków osi
axis.title = element_blank())  # Usunięcie tytułów osi
# Ładowanie niezbędnych bibliotek
library(rnaturalearth)
library(sf)
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
# Krok 1: Wczytanie danych geograficznych krajów z rnaturalearth
world <- ne_countries(scale = 50, returnclass = 'sf')
# Krok 3: Lista krajów do wyświetlenia (bez Rosji)
countries_to_show <- c("Albania", "Austria", "Belarus", "Belgium", "Bulgaria",
"Croatia", "Czechia", "Denmark", "Estonia",
"Finland", "France", "Germany", "Greece", "Hungary", "Iceland",
"Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta",
"Moldova", "Montenegro", "Netherlands", "North Macedonia",
"Norway", "Poland", "Portugal", "Romania", "Serbia", "Russia",
"Serbia and Montenegro", "Slovakia", "Slovenia", "Soviet Union",
"Spain", "Sweden", "Switzerland", "Ukraine", "United Kingdom")
# Krok 4: Filtruj dane, aby tylko wybrane kraje były w zbiorze i dla roku 2000
data_filtered <- data %>%
filter(Kraj %in% countries_to_show) %>%
filter(Rok == 2000)  # Filtruj dane na rok 2000
# Krok 5: Połącz dane geograficzne z danymi o krajach
world_filtered <- world %>%
filter(name %in% countries_to_show) %>%
left_join(data_filtered, by = c("name" = "Kraj"))
# Krok 6: Rysowanie mapy (bez etykiet i bez Rosji)
ggplot(world_filtered) +
geom_sf(aes(fill = PKB), color = 'black') +  # Kolorowanie krajów na podstawie PKB
coord_sf(crs = st_crs(3035),                   # Ustawienie układu współrzędnych
xlim = c(2000000, 6200000),
ylim = c(1500000, 5500000)) +         # Zakres widocznej części mapy
scale_fill_viridis_c(option = "C", na.value = 'white') +  # Skala kolorów
theme_minimal() +  # Minimalistyczny wygląd
labs(title = "Mapa PKB na świecie (Wybrane kraje, rok 2000)",
subtitle = "PKB per capita w 2000 roku") +
theme(axis.text = element_blank(),   # Usunięcie napisów osi
axis.ticks = element_blank(),  # Usunięcie ticków osi
axis.title = element_blank())  # Usunięcie tytułów osi
# Wykres średnich wartości PKB w różnych regionach
ggplot(data_region_year, aes(x = Region, y = mean_PKB, color = Region)) +
geom_point(size = 3) +
geom_line(aes(group = Region), size = 1) +
labs(
title = "Średnia wartość PKB w regionach Europy",
x = "Region",
y = "Średnia wartość PKB"
) +
theme_minimal() +
theme(legend.position = "none") +
scale_color_brewer(palette = "Set2")
# 1. Grupowanie danych i obliczanie średniego PKB dla regionów
data_region_year <- data %>%
group_by(Region, Rok) %>%
summarise(mean_PKB = mean(PKB), .groups = "drop")  # Średni PKB dla każdego roku i regionu
# 2. Testy t-Studenta dla porównań między regionami
# Pobranie unikalnych regionów
regions <- unique(data$Region)
# Przygotowanie wyników testów t-Studenta dla wszystkich par regionów
results <- expand.grid(Region1 = regions, Region2 = regions) %>%
filter(Region1 != Region2) %>%
rowwise() %>%
mutate(
t_test = list(t.test(
data %>% filter(Region == Region1) %>% pull(PKB),
data %>% filter(Region == Region2) %>% pull(PKB),
alternative = "two.sided",
var.equal = FALSE
)),
p_value = t_test$p.value,
statistic = t_test$statistic
)
# Dodanie korekty Bonferroniego dla wielokrotnych porównań
results <- results %>%
mutate(p_adjusted = p.adjust(p_value, method = "bonferroni"))
# 3. Wizualizacja - Wykres pudełkowy z oznaczeniem wyników testów t-Studenta
ggplot(data, aes(x = Region, y = PKB, fill = Region)) +
geom_boxplot() +
geom_signif(
comparisons = list(c("Eastern Europe", "Western Europe"), c("Southern Europe", "Northern Europe")),  # Przykłady regionów
map_signif_level = TRUE
) +
labs(
title = "Rozkład PKB w różnych regionach Europy",
x = "Region",
y = "PKB per capita"
) +
theme_minimal() +
theme(legend.position = "none")
install.packages("ggsignif")
library(ggsignif)# 1. Grupowanie danych i obliczanie średniego PKB dla regionów
data_region_year <- data %>%
group_by(Region, Rok) %>%
summarise(mean_PKB = mean(PKB), .groups = "drop")  # Średni PKB dla każdego roku i regionu
# 2. Testy t-Studenta dla porównań między regionami
# Pobranie unikalnych regionów
regions <- unique(data$Region)
# Przygotowanie wyników testów t-Studenta dla wszystkich par regionów
results <- expand.grid(Region1 = regions, Region2 = regions) %>%
filter(Region1 != Region2) %>%
rowwise() %>%
mutate(
t_test = list(t.test(
data %>% filter(Region == Region1) %>% pull(PKB),
data %>% filter(Region == Region2) %>% pull(PKB),
alternative = "two.sided",
var.equal = FALSE
)),
p_value = t_test$p.value,
statistic = t_test$statistic
)
# Dodanie korekty Bonferroniego dla wielokrotnych porównań
results <- results %>%
mutate(p_adjusted = p.adjust(p_value, method = "bonferroni"))
# 3. Wizualizacja - Wykres pudełkowy z oznaczeniem wyników testów t-Studenta
ggplot(data, aes(x = Region, y = PKB, fill = Region)) +
geom_boxplot() +
geom_signif(
comparisons = list(c("Eastern Europe", "Western Europe"), c("Southern Europe", "Northern Europe")),  # Przykłady regionów
map_signif_level = TRUE
) +
labs(
title = "Rozkład PKB w różnych regionach Europy",
x = "Region",
y = "PKB per capita"
) +
theme_minimal() +
theme(legend.position = "none")
# 4. Wizualizacja - Wykres słupkowy z średnimi wartościami PKB
ggplot(data_region_year, aes(x = Region, y = mean_PKB, fill = Region)) +
geom_bar(stat = "identity", show.legend = FALSE) +
geom_text(aes(label = sprintf("%.2f", mean_PKB)), vjust = -0.5) +
labs(
title = "Średnia wartość PKB per capita w regionach Europy",
x = "Region",
y = "Średnia wartość PKB"
) +
theme_minimal()
# 5. Wyświetlenie tabeli wyników testów t-Studenta
results %>%
select(Region1, Region2, p_value, p_adjusted) %>%
arrange(p_value)
